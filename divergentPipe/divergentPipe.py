#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.13.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'C:/Users/Arman/Desktop/SalomeTraining')

###
### SHAPER component
###

from salome.shaper import model

model.begin()
partSet = model.moduleDocument()

### Create Part
Part_1 = model.addPart(partSet)
Part_1_doc = Part_1.document()

### Create Cone
Cone_1 = model.addCone(Part_1_doc, model.selection("VERTEX", "PartSet/Origin"), model.selection("EDGE", "PartSet/OX"), 2, 4, 40)

### Create Group
Group_1 = model.addGroup(Part_1_doc, "Faces", [model.selection("FACE", "Cone_1_1/Face_1")])
Group_1.setName("walls")
Group_1.result().setName("walls")

### Create Group
Group_2 = model.addGroup(Part_1_doc, "Faces", [model.selection("FACE", "Cone_1_1/Face_3")])
Group_2.setName("inlet")
Group_2.result().setName("inlet")

### Create Group
Group_3 = model.addGroup(Part_1_doc, "Faces", [model.selection("FACE", "Cone_1_1/Face_2")])
Group_3.setName("outlet")
Group_3.result().setName("outlet")

model.end()

###
### SHAPERSTUDY component
###

model.publishToShaperStudy()
import SHAPERSTUDY
Cone_1_1, walls, inlet, outlet, = SHAPERSTUDY.shape(model.featureStringId(Cone_1))
###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

#hyp_0.SetLength( 4.15692 ) ### not created Object
NETGEN_3D_Parameters_1 = smesh.CreateHypothesisByAverageLength( 'NETGEN_Parameters', 'NETGENEngine', 4.15692, 0 )
smeshObj_1 = smesh.Mesh(Cone_1_1)
status = smeshObj_1.AddHypothesis( Cone_1_1, NETGEN_3D_Parameters_1 )
NETGEN_1D_2D_3D = smesh.CreateHypothesis('NETGEN_2D3D', 'NETGENEngine')
status = smeshObj_1.AddHypothesis(NETGEN_1D_2D_3D)
smeshObj_2 = smeshObj_1.GroupOnGeom(walls,'walls',SMESH.FACE)
smeshObj_3 = smeshObj_1.GroupOnGeom(inlet,'inlet',SMESH.FACE)
smeshObj_4 = smeshObj_1.GroupOnGeom(outlet,'outlet',SMESH.FACE)
isDone = smeshObj_1.Compute()
smeshObj_1.CheckCompute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
NETGEN_3D_Parameters_2 = smesh.CreateHypothesis('NETGEN_Parameters', 'NETGENEngine')
NETGEN_3D_Parameters_2.SetMaxSize( 1 )
NETGEN_3D_Parameters_2.SetMinSize( 0.3 )
NETGEN_3D_Parameters_2.SetSecondOrder( 0 )
NETGEN_3D_Parameters_2.SetOptimize( 1 )
NETGEN_3D_Parameters_2.SetFineness( 2 )
NETGEN_3D_Parameters_2.SetChordalError( -1 )
NETGEN_3D_Parameters_2.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_2.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_2.SetFuseEdges( 1 )
NETGEN_3D_Parameters_2.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_2.SetCheckChartBoundary( 112 )
status = smeshObj_1.RemoveHypothesis(NETGEN_3D_Parameters_1)
status = smeshObj_1.AddHypothesis(NETGEN_3D_Parameters_2)
smeshObj_1.Clear()
isDone = smeshObj_1.Compute()
smeshObj_1.CheckCompute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
NETGEN_3D_Parameters_3 = smesh.CreateHypothesis('NETGEN_Parameters', 'NETGENEngine')
NETGEN_3D_Parameters_3.SetMaxSize( 0.08 )
NETGEN_3D_Parameters_3.SetMinSize( 0.04 )
NETGEN_3D_Parameters_3.SetSecondOrder( 0 )
NETGEN_3D_Parameters_3.SetOptimize( 1 )
NETGEN_3D_Parameters_3.SetFineness( 2 )
NETGEN_3D_Parameters_3.SetChordalError( -1 )
NETGEN_3D_Parameters_3.SetChordalErrorEnabled( 0 )
NETGEN_3D_Parameters_3.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_3.SetFuseEdges( 1 )
NETGEN_3D_Parameters_3.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_3.SetCheckChartBoundary( 112 )
status = smeshObj_1.RemoveHypothesis(NETGEN_3D_Parameters_2)
status = smeshObj_1.AddHypothesis(NETGEN_3D_Parameters_3)
smeshObj_1.Clear()
isDone = smeshObj_1.Compute()
smeshObj_1.CheckCompute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
NETGEN_3D_Parameters_3.SetMaxSize( 0.2 )
NETGEN_3D_Parameters_3.SetMinSize( 0.1 )
NETGEN_3D_Parameters_3.SetCheckChartBoundary( 1 )
NETGEN_3D_Parameters_3.SetCheckChartBoundary( 112 )
smeshObj_1.Clear()
isDone = smeshObj_1.Compute()
smeshObj_1.CheckCompute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
smeshObj_5 = smeshObj_1.GroupOnGeom(walls,'walls',SMESH.FACE)
smeshObj_6 = smeshObj_1.GroupOnGeom(inlet,'inlet',SMESH.FACE)
smeshObj_7 = smeshObj_1.GroupOnGeom(outlet,'outlet',SMESH.FACE)
smeshObj_8 = smeshObj_1.GroupOnGeom(walls,'walls',SMESH.NODE)
smeshObj_9 = smeshObj_1.GroupOnGeom(inlet,'inlet',SMESH.NODE)
smeshObj_10 = smeshObj_1.GroupOnGeom(outlet,'outlet',SMESH.NODE)
smeshObj_1.RemoveGroup( smeshObj_7 )
smeshObj_1.RemoveGroup( smeshObj_6 )
smeshObj_1.RemoveGroup( smeshObj_5 )
smeshObj_1.RemoveGroup( smeshObj_4 )
smeshObj_1.RemoveGroup( smeshObj_3 )
smeshObj_1.RemoveGroup( smeshObj_2 )
smeshObj_1.RemoveGroup( smeshObj_10 )
smeshObj_1.RemoveGroup( smeshObj_9 )
smeshObj_1.RemoveGroup( smeshObj_8 )
smeshObj_11 = smeshObj_1.GroupOnGeom(walls,'walls',SMESH.FACE)
smeshObj_12 = smeshObj_1.GroupOnGeom(inlet,'inlet',SMESH.FACE)
smeshObj_13 = smeshObj_1.GroupOnGeom(outlet,'outlet',SMESH.FACE)
smeshObj_14 = smeshObj_1.GroupOnGeom(walls,'walls',SMESH.NODE)
smeshObj_15 = smeshObj_1.GroupOnGeom(inlet,'inlet',SMESH.NODE)
smeshObj_16 = smeshObj_1.GroupOnGeom(outlet,'outlet',SMESH.NODE)
try:
  smeshObj_1.ExportUNV( r'C:/Users/Arman/Desktop/SalomeTraining/divergentPipe.unv', 0 )
  pass
except:
  print('ExportUNV() failed. Invalid file name?')
smeshObj_17 = smesh.CreateHypothesis('NETGEN_Parameters_3D', 'NETGENEngine')
smeshObj_18 = smesh.CreateHypothesis('ViscousLayers')
#hyp_10.SetLength( 1 ) ### not created Object
NETGEN_3D_Parameters_4 = smesh.CreateHypothesisByAverageLength( 'NETGEN_Parameters', 'NETGENEngine', 1, 0 )
main = smesh.Mesh(Cone_1_1,'main')
status = main.AddHypothesis( Cone_1_1, NETGEN_3D_Parameters_4 )
status = main.AddHypothesis(NETGEN_1D_2D_3D)
walls_1 = main.GroupOnGeom(walls,'walls',SMESH.FACE)
inlet_1 = main.GroupOnGeom(inlet,'inlet',SMESH.FACE)
outlet_1 = main.GroupOnGeom(outlet,'outlet',SMESH.FACE)
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
smeshObj_19 = smesh.CreateHypothesis('ViscousLayers')
smeshObj_20 = smesh.CreateHypothesis('ViscousLayers2D')
NETGEN_3D_Parameters_4.SetMaxSize( 1 )
NETGEN_3D_Parameters_4.SetMinSize( 0.01 )
NETGEN_3D_Parameters_4.SetSecondOrder( 0 )
NETGEN_3D_Parameters_4.SetOptimize( 1 )
NETGEN_3D_Parameters_4.SetFineness( 4 )
NETGEN_3D_Parameters_4.SetChordalError( 0.5 )
NETGEN_3D_Parameters_4.SetChordalErrorEnabled( 1 )
NETGEN_3D_Parameters_4.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_4.SetFuseEdges( 1 )
NETGEN_3D_Parameters_4.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_4.SetCheckChartBoundary( 208 )
Viscous_Layers_1 = smesh.CreateHypothesis('ViscousLayers')
Viscous_Layers_1.SetTotalThickness( 0.5 )
Viscous_Layers_1.SetNumberLayers( 5 )
Viscous_Layers_1.SetStretchFactor( 1.3 )
Viscous_Layers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_1.SetFaces( [], 0 )
status = main.AddHypothesis(Viscous_Layers_1)
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
Viscous_Layers_1.SetTotalThickness( 0.5 )
Viscous_Layers_1.SetNumberLayers( 5 )
Viscous_Layers_1.SetStretchFactor( 1.3 )
Viscous_Layers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_1.SetFaces( [ 12, 10 ], 1 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
NETGEN_3D_Parameters_4.SetMaxSize( 0.05 )
NETGEN_3D_Parameters_4.SetCheckChartBoundary( 1 )
NETGEN_3D_Parameters_4.SetCheckChartBoundary( 208 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
NETGEN_3D_Parameters_4.SetMaxSize( 0.2 )
NETGEN_3D_Parameters_4.SetMinSize( 0.05 )
NETGEN_3D_Parameters_4.SetCheckChartBoundary( 1 )
NETGEN_3D_Parameters_4.SetCheckChartBoundary( 208 )
Viscous_Layers_1.SetTotalThickness( 0.05 )
Viscous_Layers_1.SetNumberLayers( 6 )
Viscous_Layers_1.SetStretchFactor( 1.02 )
Viscous_Layers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_1.SetFaces( [ 12, 10 ], 1 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
Viscous_Layers_1.SetTotalThickness( 0.5 )
Viscous_Layers_1.SetNumberLayers( 6 )
Viscous_Layers_1.SetStretchFactor( 1.02 )
Viscous_Layers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_1.SetFaces( [ 12, 10 ], 1 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
Viscous_Layers_1.SetTotalThickness( 0.4 )
Viscous_Layers_1.SetNumberLayers( 6 )
Viscous_Layers_1.SetStretchFactor( 1.3 )
Viscous_Layers_1.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_1.SetFaces( [ 12, 10 ], 1 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
Regular_1D = main.Segment(geom=walls)
smeshObj_21 = Regular_1D.GetSubMesh()
Number_of_Segments_1 = Regular_1D.NumberOfSegments(25)
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
main.GetMesh().RemoveSubMesh( smeshObj_21 )
main.Clear()
isDone = main.Compute()
main.CheckCompute()
[ walls_1, inlet_1, outlet_1 ] = main.GetGroups()
try:
  main.ExportUNV( r'C:/Users/Arman/Desktop/SalomeTraining/divergentPipe.unv', 0 )
  pass
except:
  print('ExportUNV() failed. Invalid file name?')

## some objects were removed
aStudyBuilder = salome.myStudy.NewBuilder()
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_9))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_17))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_10))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_2))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_16))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_14))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_15))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_12))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_21))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_20))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_5))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_7))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_6))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_11))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_13))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_8))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_3))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_18))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_4))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_19))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)

## Set names of Mesh objects
smesh.SetName(Viscous_Layers_1, 'Viscous Layers_1')
smesh.SetName(outlet_1, 'outlet')
smesh.SetName(Number_of_Segments_1, 'Number of Segments_1')
smesh.SetName(NETGEN_3D_Parameters_3, 'NETGEN 3D Parameters_3')
smesh.SetName(NETGEN_3D_Parameters_1, 'NETGEN 3D Parameters_1')
smesh.SetName(inlet_1, 'inlet')
smesh.SetName(main.GetMesh(), 'main')
smesh.SetName(NETGEN_3D_Parameters_4, 'NETGEN 3D Parameters_4')
smesh.SetName(walls_1, 'walls')
smesh.SetName(NETGEN_1D_2D_3D, 'NETGEN 1D-2D-3D')
smesh.SetName(NETGEN_3D_Parameters_2, 'NETGEN 3D Parameters_2')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
